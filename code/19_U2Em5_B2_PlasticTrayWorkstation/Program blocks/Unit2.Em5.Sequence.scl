NAMESPACE Unit2.Em5
FUNCTION_BLOCK Sequence
TITLE = EquipmentC_StateActions
{ S7_Optimized_Access := 'TRUE' ; Published := 'FALSE' }
VERSION : 0.1
//State model of equipment module following the OMAC standard.
   VAR 
      statSelectedJobNumber { ExternalWritable := 'False'} : DInt;   // Evaluated Job Number
      instSequenceSCLControl { ExternalWritable := 'False'; S7_SetPoint := 'False'} : _.LAF_ControlSclSequence;
      instSequenceSCLStatus { ExternalWritable := 'False'; S7_SetPoint := 'False'} : _.LAF_StatusSclSequence;
      statVfdSportsInc { ExternalWritable := 'False'; S7_SetPoint := 'True'} : Int;
      statVfdSportsIncEnable { ExternalWritable := 'False'} : Bool;
      statRecoverOn { ExternalWritable := 'False'} : Bool;
      statRecoverStep { ExternalWritable := 'False'} : DInt;
      statCurrentStepPrevious { ExternalWritable := 'False'} : DInt;
   END_VAR

   VAR_TEMP 
      tempPcCompeteStep111 : Bool;
   END_VAR

   VAR CONSTANT 
      STEP_IDLE : DInt := 1;   // Idle Step
      STEP_101 : DInt := 101;
      STEP_102 : DInt := 102;   // Template Step
      STEP_103 : DInt := 103;   // Template Step
      STEP_104 : DInt := 104;
      STEP_105 : DInt := 105;
      STEP_106 : DInt := 106;
      STEP_107 : DInt := 107;
      STEP_108 : DInt := 108;
      STEP_109 : DInt := 109;
      STEP_110 : DInt := 110;
      STEP_111 : DInt := 111;
      STEP_120 : DInt := 120;
      STEP_112 : DInt := 112;
      STEP_113 : DInt := 113;
      STEP_114 : DInt := 114;
      STEP_115 : DInt := 115;
      STEP_1202 : DInt := 1202;
      STEP_121 : DInt := 121;
      STEP_122 : DInt := 122;
      STEP_123 : DInt := 123;
      STEP_124 : DInt := 124;
      STEP_130 : DInt := 130;
      STEP_131 : DInt := 131;
      STEP_132 : DInt := 132;
      STEP_201 : DInt := 201;
      STEP_301 : DInt := 301;
      STEP_401 : DInt := 401;
      STEP_501 : DInt := 501;
      STEP_701 : DInt := 701;
      STEP_601 : DInt := 601;
      STEP_602 : DInt := 602;
      STEP_IMMEDIATE_STOP : DInt := 901;   // Step executed when an immediate stop command is triggered for the sequence (i.e. when unit is in state aborting)
      TO_DO_INSERT_CONDITION_FOR_TRANSITION_HERE : Bool := TRUE;   // Template : Add conditions
      VFD_CW : DInt := 1;
      VFD_CCW : DInt := -1;
      "24SIZE" : Int := 24;
      "36SIZE" : Int := 36;
      WITHORWITHOUTDETECT1ERROR : Int := 6;
      WITHORWITHOUTDETECT2ERROR : Int := 7;
      WITHORWITHOUTDETECT3ERROR : Int := 8;
      WITHORWITHOUTDETECT4ERROR : Int := 9;
      RECOVERERROR : Int := 10;
      TRAYPOSTION_LOGISTIC : Word := 16#0001;
      TRAYPOSTION_EM1 : Word := 16#0002;
      TRAYPOSTION_EM2 : Word := 16#0004;
      TRAYPOSTION_EM5 : Word := 16#0008;
      TRAYPOSTION_EM6 : Word := 16#0010;
   END_VAR


BEGIN
	REGION BLOCK INFO HEADER
	    //===============================================================================
	    // (company)/ (c)Copyright (year)
	    //-------------------------------------------------------------------------------
	    // Title:            (Title of this block)
	    // Comment/Function: (that is implemented in the block)
	    // Library/Family:   (that the source is dedicated to)
	    // Author:           (department / person in charge / contact)
	    // Tested with:      (test system with FW version)
	    // Engineering:      TIA Portal (SW version)
	    // Restrictions:     (OB types, etc.)
	    // Requirements:     (hardware, technological package, etc.)
	    //-------------------------------------------------------------------------------
	    // Change log table:
	    // Version  | Date       | Expert in charge        | Changes applied
	    //----------|------------|-------------------------|-----------------------------
	    // 01.00.00 | dd.mm.yyyy | (name of expert)        | First released version
	    //===============================================================================
	END_REGION BLOCK INFO HEADER
	
	REGION DESCRIPTION
	(/*
	This is a template block provided by the Automation Framework. It can be used to create an own project.
	The Block Info Header is prepared to put in your own data.
	Description of the block could be added here and the docu created by Code2Docu.
	*/)
	END_REGION DESCRIPTION
	REGION intput
	    
	END_REGION
	IF HmiInterface.sequence.commands.setSingleStepMode THEN
	    IF NOT HmiInterface.sequence.commands.nextStep THEN
	        ControlNodes.sequence.status.nextStep := ControlNodes.sequence.status.currentStep;
	        ;
	    END_IF;
	END_IF;
	REGION Sequence control
	    // General control of the sequence
	    #instSequenceSCLControl(idleStep := #STEP_IDLE,
	                            stoppedStep := #STEP_IMMEDIATE_STOP,
	                            resetJobs => ControlNodes.jobs.commands.reset,
	                            hmiInterface := HmiInterface.sequence,
	                            sequence := ControlNodes.sequence);
	END_REGION Sequence control
	
	REGION Steps
	    // Only execute sequence if active
	    IF ControlNodes.sequence.status.seqActive THEN
	        
	        // Determine the current step
	        CASE ControlNodes.sequence.status.currentStep OF
	                
	            #STEP_IDLE:
	                // If a new job is activated, move to the first step of that job                   
	                IF ControlNodes.sequence.status.executionEnabled THEN
	                    CASE ControlNodes.jobs.commands.setJobNumber OF
	                        _.U2EM5_JOB_EXECUTE:
	                            ControlNodes.sequence.status.nextStep := #STEP_102;
	                        _.U2EM5_JOB_STOPPING:
	                            ControlNodes.sequence.status.nextStep := #STEP_201;
	                        _.U2EM5_JOB_HOLODING:
	                            ControlNodes.sequence.status.nextStep := #STEP_301;
	                        _.U2EM5_JOB_UNHOLODING:
	                            ControlNodes.sequence.status.nextStep := #STEP_401;
	                        _.U2EM5_JOB_RESTING:
	                            ControlNodes.sequence.status.nextStep := #STEP_501;
	                        _.U2EM5_JOB_STARTING:
	                            ControlNodes.sequence.status.nextStep := #STEP_601;
	                            (* _.U2EM5_JOB_RECOVER:
	                                 ControlNodes.sequence.status.nextStep := #STEP_701; *)
	                    END_CASE;
	                    
	                END_IF;
	                (* ControlNodes.cm1Vfd206.sinaControlNode.commandConfiguration.referenceSpeed :=
	                 HmiInterface.cm1Vfd206.commandConfiguration.referenceSpeed := "_".Global.Data.parameter.U2EM2.cm1Vfd206.general.refSpeed; *)
	                REGION ########JOB_STARTING_Step600
	                    
	                    
	                END_REGION
	            #STEP_601:
	                REGION STARTING_initsimSignal_Step601
	                    ControlNodes.cm3SignalTM.reset := true;
	                    ControlNodes.sequence.status.nextStep := #STEP_602;
	                END_REGION ;
	            #STEP_602:
	                REGION Step602_GOHOME
	                    IF NOT _.Global.Data.unit[1].specialFunctions.specialFunction10 THEN
	                        
	                        ControlNodes.cm2Cylinder.commands.commandHomePos := TRUE;
	                        IF ControlNodes.cm2Cylinder.monitoring.inHomePos THEN
	                            ControlNodes.sequence.status.nextStep := #STEP_IDLE;
	                        END_IF;
	                    ELSE
	                        ControlNodes.sequence.status.nextStep := #STEP_IDLE;
	                    END_IF;
	                    
	                END_REGION
	                
	                REGION ########JOB_RESTING_Step500
	                    
	                    
	                END_REGION
	            #STEP_501:
	                ControlNodes.cm3SignalTM.reset := true;
	                ControlNodes.sequence.status.nextStep := #STEP_IDLE;
	            #STEP_401:
	                REGION UNHOLODING_Step401
	                    
	                    
	                    ControlNodes.sequence.status.nextStep := #STEP_IDLE;
	                END_REGION ;
	                REGION ########JOB_HOLODING_Step300
	                    
	                    
	                END_REGION
	            #STEP_301:
	                REGION HOLODING_Step301
	                    
	                    
	                    
	                    ;
	                END_REGION ;
	                REGION ########JOB_STOPPING_Step200
	                    
	                    
	                END_REGION
	            #STEP_201:
	                REGION STEP_201 stopping
	                    ControlNodes.cm1Vfd208.commands.sinaCommands.stop := TRUE;
	                    
	                    IF ControlNodes.cm1Vfd208.monitoring.vfdStopped
	                        
	                    THEN
	                        ControlNodes.sequence.status.nextStep := #STEP_IDLE;
	                        ;
	                    END_IF;
	                    
	                END_REGION
	                
	                REGION ########RECOVERING_JOB
	                END_REGION
	            #STEP_701:
	                REGION Step_701
	                    // Statement section REGION
	                    
	                    _.Global.Data.unit[1].specialFunctions.specialFunction10 := FALSE;
	                END_REGION ;
	                
	                REGION ########JOB_EXECUTE_Step100
	                    
	                END_REGION
	            #STEP_102:
	                REGION STEP_102 initPara
	                    
	                    IF #statRecoverOn THEN
	                        ControlNodes.sequence.status.nextStep := #statRecoverStep;
	                        #statRecoverOn := false;
	                    ELSE
	                        EXCHANGETRAY_PlasticCmParameterUpdate();
	                        ControlNodes.sequence.status.nextStep := #STEP_103;
	                        _.Unit2.EmNodes.emRelations.EM5.deliver.handlingXyz.req.transferEnable := FALSE;
	                    END_IF;
	                    
	                    
	                END_REGION ;
	                
	                
	                
	            #STEP_103:
	                REGION STEP_103 Request Come In the tray
	                    _.Unit2.EmNodes.emRelations.EM5.deliver.roller.req.inFeedReq := true;
	                    IF _.Unit2.EmNodes.emRelations.EM5.recieve.roller.req.outFeedReq THEN
	                        ControlNodes.sequence.status.nextStep := #STEP_104;
	                        ;
	                    END_IF;
	                    
	                    ;
	                END_REGION
	                
	                ;
	                
	                
	            #STEP_104:
	                REGION STEP_104 vfd run for feed in 
	                    ControlNodes.cm1Vfd208.commandConfiguration.direction := #VFD_CW;
	                    IF ControlNodes.cm2Cylinder.monitoring.inHomePos
	                        AND NOT
	                        ControlNodes.cm3SignalTM.monitoring.plasticTrayFeedingDetectionU2EM5
	                        AND NOT
	                        ControlNodes.cm3SignalTM.monitoring.plasticTrayTrayInplaceDetectionU2EM5
	                        AND NOT
	                        ControlNodes.cm3SignalTM.monitoring.inspectionAfterPlasticTrayJackingU2EM5
	                        AND NOT
	                        ControlNodes.cm3SignalTM.monitoring.inspectionBeforePlasticTrayJackingU2EM5
	                    THEN
	                        EXCHANGETRAY_VfdExecuteControl(TRUE);
	                        
	                    END_IF;
	                    IF ControlNodes.cm3SignalTM.monitoring.plasticTrayTrayInplaceDetectionU2EM5 THEN
	                        _.Global.Data.material.Unit2.plastic.monitor.postion.position := #TRAYPOSTION_EM5;
	                        
	                        ControlNodes.sequence.status.nextStep := #STEP_105;
	                        ;
	                    END_IF;
	                    
	                    ;
	                END_REGION ;
	                ;
	                
	            #STEP_105:
	                REGION STEP_105 traylifting
	                    _.Global.Data.material.Unit2.plastic.monitor.trayCode := WSTRING#'';
	                    _.Unit2.Em5.ControlNodes.cm4Sr1000.commands.reset := TRUE;
	                    EXCHANGETRAY_VfdExecuteControl(FALSE);
	                    IF ControlNodes.cm1Vfd208.monitoring.vfdStopped THEN
	                        ControlNodes.cm2Cylinder.commands.commandWorkPos := TRUE;
	                        ;
	                    END_IF;
	                    IF ControlNodes.cm2Cylinder.monitoring.inWorkPos THEN
	                        
	                        
	                        ControlNodes.sequence.status.nextStep := #STEP_106;
	                    END_IF;
	                    
	                END_REGION
	                
	                
	                
	            #STEP_106:
	                REGION STEP_106 scan code
	                    ControlNodes.cm4Sr1000.commands.start := TRUE;
	                    IF ControlNodes.cm4Sr1000.monitoring.complete THEN
	                        _.Global.Data.material.Unit2.plastic.monitor.trayCode := STRING_TO_WSTRING(ControlNodes.cm4Sr1000.monitoring.code);
	                        ControlNodes.sequence.status.nextStep := #STEP_107;
	                        ;
	                    END_IF;
	                    ;
	                END_REGION
	                
	            #STEP_107:
	                REGION PC read code 
	                    IF _.Global.Data.general.activateSimulation THEN
	                        ControlNodes.sequence.status.nextStep := #STEP_108;
	                        ;
	                    END_IF;
	                    ;
	                    
	                    
	                END_REGION
	            #STEP_108:
	                REGION STEP_108 enable xyz handling put cells
	                    _.Unit2.EmNodes.emRelations.EM5.deliver.handlingXyz.req.transferEnable := TRUE;
	                    IF _.Unit2.EmNodes.emRelations.EM5.recieve.handlingXyz.req.transferEnable THEN
	                        _.Unit2.EmNodes.emRelations.EM4.deliver.plasticRoller.req.transferEnable := FALSE;
	                        ControlNodes.sequence.status.nextStep := #STEP_109;
	                        ;
	                    END_IF;
	                    
	                END_REGION
	            #STEP_109:
	                REGION STEP_109 cylinder lift down
	                    _.Unit2.EmNodes.emRelations.EM5.deliver.handlingXyz.req.transferEnable := FALSE;
	                    ControlNodes.cm2Cylinder.commands.commandHomePos := TRUE;
	                    ;
	                    IF ControlNodes.cm2Cylinder.monitoring.inHomePos THEN
	                        ControlNodes.sequence.status.nextStep := #STEP_110;
	                        ;
	                    END_IF;
	                    
	                    
	                END_REGION ;
	            #STEP_110:
	                REGION STEP_110 request pc tray feed out
	                    IF _.Global.Data.general.activateSimulation THEN
	                        ControlNodes.sequence.status.nextStep := #STEP_111;
	                        ;
	                    END_IF;
	                    
	                END_REGION
	                
	                ;
	            #STEP_111:
	                REGION pc read data complete ,requeset tray feed out
	                    IF _.Global.Data.general.activateSimulation THEN
	                        #tempPcCompeteStep111 := TRUE;
	                        
	                        ;
	                    END_IF;
	                    ;
	                    IF #tempPcCompeteStep111 THEN
	                        _.Unit2.EmNodes.emRelations.EM5.deliver.roller.req.outFeedReq := TRUE;
	                        IF _.Unit2.EmNodes.emRelations.EM5.recieve.roller.req.inFeedReq THEN
	                            ControlNodes.sequence.status.nextStep := #STEP_112;
	                            ;
	                        END_IF;
	                        ;
	                    END_IF;
	                    
	                END_REGION
	                
	                
	                
	            #STEP_112:
	                REGION STEP_112 tray running feed out
	                    ControlNodes.cm1Vfd208.commandConfiguration.direction := #VFD_CCW;
	                    IF ControlNodes.cm3SignalTM.monitoring.plasticTrayTrayInplaceDetectionU2EM5 THEN
	                        _.Unit2.Em5.EXCHANGETRAY_VfdExecuteControl(TRUE);
	                    END_IF;
	                    IF _.Global.Data.material.Unit2.plastic.monitor.postion.EM6 THEN
	                        _.Unit2.Em5.EXCHANGETRAY_VfdExecuteControl(FALSE);
	                        ControlNodes.sequence.status.nextStep := #STEP_IDLE;
	                    END_IF;
	                    
	                END_REGION
	                
	                
	                REGION ########STEP_IMMEDIATE_STOP
	                    // Statement section REGION
	                    
	                END_REGION
	                
	            #STEP_IMMEDIATE_STOP:
	                
	                ControlNodes.cm1Vfd208.commands.sinaCommands.fastStop := TRUE;
	                
	                IF ControlNodes.cm1Vfd208.monitoring.vfdStopped
	                    
	                THEN
	                    ControlNodes.sequence.status.nextStep := #STEP_IDLE;
	                    ;
	                END_IF;
	                
	        END_CASE;
	    END_IF;
	END_REGION Steps
	
	REGION Status updates      
	    REGION Sequence Status
	        // Update the status
	        #instSequenceSCLStatus(parentReferenceDesignator := Config.em.referenceDesignator.combined,
	                               idleStep := #STEP_IDLE,
	                               stoppedStep := #STEP_IMMEDIATE_STOP,
	                               setJobNumber := ControlNodes.jobs.commands.setJobNumber,
	                               activeJobNumber => ControlNodes.jobs.status.activeJobNumber,
	                               previousCycleJobNumber => ControlNodes.jobs.status.previousCycleJobNumber,
	                               hmiInterface := HmiInterface.sequence,
	                               sequence := ControlNodes.sequence);
	    END_REGION Sequence Status
	    
	    
	    REGION Update Job History
	        // Update the History of jobs if a new job was started
	        IF (ControlNodes.jobs.status.activeJobNumber <> ControlNodes.jobs.status.previousCycleJobNumber) THEN
	            _.LAF_UpdateJobHistory(jobs := ControlNodes.jobs);
	        END_IF;
	    END_REGION
	    
	    REGION Output steps as String
	        // Write outputs as strings 
	        ControlNodes.sequence.status.currentStepSTRING := StepToString(ControlNodes.sequence.status.currentStep);
	        ControlNodes.sequence.status.previousStepSTRING := StepToString(ControlNodes.sequence.status.previousStep);
	        ControlNodes.sequence.status.nextStepSTRING := StepToString(ControlNodes.sequence.status.nextStep);
	    END_REGION Output steps as String   
	    
	    REGION output
	        
	        
	    END_REGION
	    
	END_REGION Status updates
	
END_FUNCTION_BLOCK
END_NAMESPACE

