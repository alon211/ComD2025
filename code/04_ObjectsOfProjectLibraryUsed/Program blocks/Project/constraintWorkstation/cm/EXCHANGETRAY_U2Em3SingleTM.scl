FUNCTION_BLOCK "LEXCHANGETRAY_U2Em3SingleTM"
TITLE = EXCHANGETRAY_U2Em3SingleTM
{ S7_Optimized_Access := 'TRUE' ; Published := 'TRUE' }
AUTHOR : 'SUP/Zhang Shi Long'
FAMILY : SUP
VERSION : 0.1
//Exchange Tray function
   VAR_INPUT 
      hookClawCylinderWorkPositionDetection2 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Hook claw cylinder work position detection sensor 2
      slideCylinderMedianPositionDetection1 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Slide cylinder median position detection sensor 1
      slideCylinderWorkPositionDetection1 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Slide cylinder work position detection sensor 1
      motorConstraintPot2 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Motor positive limit constraint sensor 2
      motorConstraintNot2 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Motor negative limit constraint sensor 2
      motorConstraintPot1 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Motor positive limit constraint sensor 1
      motorConstraintOrg2 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Motor origin constraint sensor 2
      hookClawCylinderWorkPositionDetection1 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Hook claw cylinder work position detection sensor 1
      hookClawCylinderHomePositionDetection1 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Hook claw cylinder home position detection sensor 1
      pressureGaugeSetValueDetection2_2 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Pressure gauge set value detection sensor 2-2
      motorConstraintNot1 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Motor negative limit constraint sensor 1
      slideCylinderHomePositionDetection1 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Slide cylinder home position detection sensor 1
      motorConstraintOrg1 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Motor origin constraint sensor 1
      slideCylinderHomePositionDetection2 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Slide cylinder home position detection sensor 2
      pressureGaugeSetValueDetection1_2 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Pressure gauge set value detection sensor 1-2
      pressureGaugeSetValueDetection2_1 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Pressure gauge set value detection sensor 2-1
      slideCylinderWorkPositionDetection2 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Slide cylinder work position detection sensor 2
      hookClawCylinderHomePositionDetection2 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Hook claw cylinder home position detection sensor 2
      pressureGaugeSetValueDetection1_1 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Pressure gauge set value detection sensor 1-1
      slideCylinderMedianPositionDetection2 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Slide cylinder median position detection sensor 2
   END_VAR

   VAR_IN_OUT 
      configuration : "LEXCHANGETRAY_typeConstraintWorkstationIoSignalConfigeration";   // Configuration parameters for robotic arm module
      moduleInterface : "LEXCHANGETRAY_typeConstraintWorkstationIoSignalInterface";   // Module interface for robotic arm control
      controlNode : "LEXCHANGETRAY_typeConstraintWorkstationIoSignalControlNode";   // Control node parameters
   END_VAR

   VAR 
      statManualCommands { S7_SetPoint := 'False'} : "LEXCHANGETRAY_typeConstraintWorkstationIoSignalManualCommands";   // Manual commands execution status
      statProcessValues { S7_SetPoint := 'False'} : "LEXCHANGETRAY_typeConstraintWorkstationIoSignalProcessValues";   // Process values monitoring status
      statDiagnostics : "LBC_typeDiagnostics";   // Diagnostics information status
      statSimActive : Bool;   // Simulation mode active status
      statSimActivePrevious : Bool;   // Previous simulation mode status
      statFbState : Word;   // Current function block state
      statFbStatePrevious : Word;   // Previous function block state
   END_VAR

   VAR_TEMP 
      tempSimActiveEdge : Bool;
   END_VAR


BEGIN
	REGION BLOCK INFO HEADER
	    //===============================================================================
	    // Siemens / (c)Copyright 2020-2024
	    //-------------------------------------------------------------------------------
	    // Title:            Constraint WorkStation Simulation Signal Processing Module
	    // 标题:             拘束站模拟信号处理模块
	    // Comment/Function: This module processes input signals related to Constraint WorkStation simulation, 
	    //                    maps input sources based on simulation activation status, 
	    //                    resets relevant signals, and outputs processed data.
	    // 注释/功能:        此模块处理与 拘束站模拟相关的输入信号，
	    //                    根据模拟激活状态映射不同输入源，
	    //                    重置相关信号，并输出处理后的数据。
	    // Library/Family:   EXCHANGETRAY - Library of Basic
	    // 库/家族:         换盘机 - 基本控制模块库
	    // Author:           Siemens Digital Industries
	    // 作者:            西门子数字工业
	    // Tested with:      S7-PLCSIM Advanced 6.0
	    // 测试环境:        S7-PLCSIM Advanced 6.0
	    // Engineering:      TIA Portal V19
	    // 工程环境:        TIA Portal V19
	    // Restrictions:     ENO mechanism is not used - forced to False.
	    // 限制条件:        不使用 ENO 机制 - 强制设置为 False。
	    // Requirements:     PLC (S7-1200 / S7-1500)
	    // 要求:            PLC (S7-1200 / S7-1500)
	    //-------------------------------------------------------------------------------
	    // Change log table:
	    // Version  | Date       | Expert in charge        | Changes applied
	    //----------|------------|-------------------------|-----------------------------
	    // 01.00.00 | 17.04.2025 | SIMATIC Systems Support | Updated block info and comments following AIupdate.scl style.
	    // 版本     | 日期       | 负责人                  | 更改内容
	    //----------|------------|-------------------------|-----------------------------
	    // 01.00.00 | 2025年4月17日 | SIMATIC系统支持        | 参照 LBC 风格更新块信息和注释。
	    //===============================================================================
	END_REGION BLOCK INFO HEADER
	
	REGION DESCRIPTION
	    (/*
	    This module processes input signals related to the Constraint WorkStation simulation. 
	    It checks whether the simulation mode is active based on the configuration. 
	    When the simulation is active, it combines the manual commands and real input signals; 
	    otherwise, it directly uses the real input signals. 
	    Additionally, it resets relevant manual commands when the simulation is inactive 
	    and finally outputs the processed data to the module interface and control node.
	    此模块处理与 拘束站模拟相关的输入信号。
	    它根据配置检查模拟模式是否激活。
	    当模拟激活时，它将手动命令和真实输入信号进行组合；
	    否则，它直接使用真实输入信号。
	    此外，当模拟未激活时，它会重置相关的手动命令，
	    最后将处理后的数据输出到模块接口和控制节点。
	    */)
	END_REGION DESCRIPTION
	
	REGION INITIALISATION  
	    // Reset relevant manual commands when the simulation is inactive
	    // 模拟未激活时，重置相关的手动命令
	    IF NOT #statSimActive OR (#controlNode.reset) THEN
	        #controlNode.reset := FALSE;
	        // 重置所有手动命令标志位
	        #statManualCommands.hookClawCylinderWorkPositionDetection2 := FALSE;
	        #statManualCommands.slideCylinderMedianPositionDetection1 := FALSE;
	        #statManualCommands.slideCylinderWorkPositionDetection1 := FALSE;
	        #statManualCommands.motorConstraintPot2 := FALSE;
	        #statManualCommands.motorConstraintNot2 := FALSE;
	        #statManualCommands.motorConstraintPot1 := FALSE;
	        #statManualCommands.motorConstraintOrg2 := FALSE;
	        #statManualCommands.hookClawCylinderWorkPositionDetection1 := FALSE;
	        #statManualCommands.hookClawCylinderHomePositionDetection1 := FALSE;
	        #statManualCommands.pressureGaugeSetValueDetection2_2 := FALSE;
	        #statManualCommands.motorConstraintNot1 := FALSE;
	        #statManualCommands.slideCylinderHomePositionDetection1 := FALSE;
	        #statManualCommands.motorConstraintOrg1 := FALSE;
	        #statManualCommands.slideCylinderHomePositionDetection2 := FALSE;
	        #statManualCommands.pressureGaugeSetValueDetection1_2 := FALSE;
	        #statManualCommands.pressureGaugeSetValueDetection2_1 := FALSE;
	        #statManualCommands.slideCylinderWorkPositionDetection2 := FALSE;
	        #statManualCommands.hookClawCylinderHomePositionDetection2 := FALSE;
	        #statManualCommands.pressureGaugeSetValueDetection1_1 := FALSE;
	        #statManualCommands.slideCylinderMedianPositionDetection2 := FALSE;
	    END_IF;
	END_REGION INITIALISATION  
	
	REGION PROGRAM LOGIC
	    REGION PROCESS INPUT SIGNALS
	        REGION Input configuration parameter
	            // Assign simulation activation status from configuration to static variable
	            // 将配置中的模拟激活状态赋值给静态变量
	            #statSimActive := #configuration.simActive;
	        END_REGION Input configuration parameter
	        
	        // Map commands from module interface to manual commands
	        // 将模块接口的命令映射到手动命令
	        #statManualCommands := #moduleInterface.commands;
	        
	        // Map input signals based on simulation activation status
	        // 根据模拟激活状态映射输入信号
	        IF #statSimActive THEN
	            // Combine manual commands and real input signals when simulation is active
	            // 模拟激活时，组合手动命令和真实输入信号
	            #statProcessValues.hookClawCylinderWorkPositionDetection2 := #statManualCommands.hookClawCylinderWorkPositionDetection2 OR #hookClawCylinderWorkPositionDetection2;
	            #statProcessValues.slideCylinderMedianPositionDetection1 := #statManualCommands.slideCylinderMedianPositionDetection1 OR #slideCylinderMedianPositionDetection1;
	            #statProcessValues.slideCylinderWorkPositionDetection1 := #statManualCommands.slideCylinderWorkPositionDetection1 OR #slideCylinderWorkPositionDetection1;
	            #statProcessValues.motorConstraintPot2 := #statManualCommands.motorConstraintPot2 OR #motorConstraintPot2;
	            #statProcessValues.motorConstraintNot2 := #statManualCommands.motorConstraintNot2 OR #motorConstraintNot2;
	            #statProcessValues.motorConstraintPot1 := #statManualCommands.motorConstraintPot1 OR #motorConstraintPot1;
	            #statProcessValues.motorConstraintOrg2 := #statManualCommands.motorConstraintOrg2 OR #motorConstraintOrg2;
	            #statProcessValues.hookClawCylinderWorkPositionDetection1 := #statManualCommands.hookClawCylinderWorkPositionDetection1 OR #hookClawCylinderWorkPositionDetection1;
	            #statProcessValues.hookClawCylinderHomePositionDetection1 := #statManualCommands.hookClawCylinderHomePositionDetection1 OR #hookClawCylinderHomePositionDetection1;
	            #statProcessValues.pressureGaugeSetValueDetection2_2 := #statManualCommands.pressureGaugeSetValueDetection2_2 OR #pressureGaugeSetValueDetection2_2;
	            #statProcessValues.motorConstraintNot1 := #statManualCommands.motorConstraintNot1 OR #motorConstraintNot1;
	            #statProcessValues.slideCylinderHomePositionDetection1 := #statManualCommands.slideCylinderHomePositionDetection1 OR #slideCylinderHomePositionDetection1;
	            #statProcessValues.motorConstraintOrg1 := #statManualCommands.motorConstraintOrg1 OR #motorConstraintOrg1;
	            #statProcessValues.slideCylinderHomePositionDetection2 := #statManualCommands.slideCylinderHomePositionDetection2 OR #slideCylinderHomePositionDetection2;
	            #statProcessValues.pressureGaugeSetValueDetection1_2 := #statManualCommands.pressureGaugeSetValueDetection1_2 OR #pressureGaugeSetValueDetection1_2;
	            #statProcessValues.pressureGaugeSetValueDetection2_1 := #statManualCommands.pressureGaugeSetValueDetection2_1 OR #pressureGaugeSetValueDetection2_1;
	            #statProcessValues.slideCylinderWorkPositionDetection2 := #statManualCommands.slideCylinderWorkPositionDetection2 OR #slideCylinderWorkPositionDetection2;
	            #statProcessValues.hookClawCylinderHomePositionDetection2 := #statManualCommands.hookClawCylinderHomePositionDetection2 OR #hookClawCylinderHomePositionDetection2;
	            #statProcessValues.pressureGaugeSetValueDetection1_1 := #statManualCommands.pressureGaugeSetValueDetection1_1 OR #pressureGaugeSetValueDetection1_1;
	            #statProcessValues.slideCylinderMedianPositionDetection2 := #statManualCommands.slideCylinderMedianPositionDetection2 OR #slideCylinderMedianPositionDetection2;
	        ELSE
	            // Use real input signals directly when simulation is inactive
	            // 模拟未激活时，直接使用真实输入信号
	            #statProcessValues.hookClawCylinderWorkPositionDetection2 := #hookClawCylinderWorkPositionDetection2;
	            #statProcessValues.slideCylinderMedianPositionDetection1 := #slideCylinderMedianPositionDetection1;
	            #statProcessValues.slideCylinderWorkPositionDetection1 := #slideCylinderWorkPositionDetection1;
	            #statProcessValues.motorConstraintPot2 := #motorConstraintPot2;
	            #statProcessValues.motorConstraintNot2 := #motorConstraintNot2;
	            #statProcessValues.motorConstraintPot1 := #motorConstraintPot1;
	            #statProcessValues.motorConstraintOrg2 := #motorConstraintOrg2;
	            #statProcessValues.hookClawCylinderWorkPositionDetection1 := #hookClawCylinderWorkPositionDetection1;
	            #statProcessValues.hookClawCylinderHomePositionDetection1 := #hookClawCylinderHomePositionDetection1;
	            #statProcessValues.pressureGaugeSetValueDetection2_2 := #pressureGaugeSetValueDetection2_2;
	            #statProcessValues.motorConstraintNot1 := #motorConstraintNot1;
	            #statProcessValues.slideCylinderHomePositionDetection1 := #slideCylinderHomePositionDetection1;
	            #statProcessValues.motorConstraintOrg1 := #motorConstraintOrg1;
	            #statProcessValues.slideCylinderHomePositionDetection2 := #slideCylinderHomePositionDetection2;
	            #statProcessValues.pressureGaugeSetValueDetection1_2 := #pressureGaugeSetValueDetection1_2;
	            #statProcessValues.pressureGaugeSetValueDetection2_1 := #pressureGaugeSetValueDetection2_1;
	            #statProcessValues.slideCylinderWorkPositionDetection2 := #slideCylinderWorkPositionDetection2;
	            #statProcessValues.hookClawCylinderHomePositionDetection2 := #hookClawCylinderHomePositionDetection2;
	            #statProcessValues.pressureGaugeSetValueDetection1_1 := #pressureGaugeSetValueDetection1_1;
	            #statProcessValues.slideCylinderMedianPositionDetection2 := #slideCylinderMedianPositionDetection2;
	        END_IF;
	        
	        REGION SIMULATE MODE
	            // Simulation mode logic can be added here
	            // 模拟模式逻辑可在此处添加
	        END_REGION SIMULATE MODE
	        
	        REGION Interlock dependent edge commands
	            // Detect the rising edge of the simulation activation signal
	            // 检测模拟激活信号的上升沿
	            #tempSimActiveEdge := #statSimActive AND NOT #statSimActivePrevious;
	        END_REGION Interlock dependent edge commands
	    END_REGION PROCESS INPUT SIGNALS
	END_REGION PROGRAM LOGIC
	
	REGION OUTPUTS
	    // Assign simulation activation status to monitoring structure
	    // 将模拟激活状态赋值给监控结构
	    #statProcessValues.simulated := #statSimActive;
	    
	    // Write manual commands to module interface
	    // 将手动命令写入模块接口
	    #moduleInterface.commands := #statManualCommands;
	    
	    // Write process values to module interface monitoring
	    // 将过程值写入模块接口监控
	    #moduleInterface.monitoring := #statProcessValues;
	    
	    // Write simulation status and processed signals to control node monitoring
	    // 将模拟状态和处理后的信号写入控制节点监控
	    #controlNode.monitoring.simulated := #statProcessValues.simulated;
	    #controlNode.monitoring.hookClawCylinderWorkPositionDetection2 := #statProcessValues.hookClawCylinderWorkPositionDetection2;
	    #controlNode.monitoring.slideCylinderMedianPositionDetection1 := #statProcessValues.slideCylinderMedianPositionDetection1;
	    #controlNode.monitoring.slideCylinderWorkPositionDetection1 := #statProcessValues.slideCylinderWorkPositionDetection1;
	    #controlNode.monitoring.motorConstraintPot2 := #statProcessValues.motorConstraintPot2;
	    #controlNode.monitoring.motorConstraintNot2 := #statProcessValues.motorConstraintNot2;
	    #controlNode.monitoring.motorConstraintPot1 := #statProcessValues.motorConstraintPot1;
	    #controlNode.monitoring.motorConstraintOrg2 := #statProcessValues.motorConstraintOrg2;
	    #controlNode.monitoring.hookClawCylinderWorkPositionDetection1 := #statProcessValues.hookClawCylinderWorkPositionDetection1;
	    #controlNode.monitoring.hookClawCylinderHomePositionDetection1 := #statProcessValues.hookClawCylinderHomePositionDetection1;
	    #controlNode.monitoring.pressureGaugeSetValueDetection2_2 := #statProcessValues.pressureGaugeSetValueDetection2_2;
	    #controlNode.monitoring.motorConstraintNot1 := #statProcessValues.motorConstraintNot1;
	    #controlNode.monitoring.slideCylinderHomePositionDetection1 := #statProcessValues.slideCylinderHomePositionDetection1;
	    #controlNode.monitoring.motorConstraintOrg1 := #statProcessValues.motorConstraintOrg1;
	    #controlNode.monitoring.slideCylinderHomePositionDetection2 := #statProcessValues.slideCylinderHomePositionDetection2;
	    #controlNode.monitoring.pressureGaugeSetValueDetection1_2 := #statProcessValues.pressureGaugeSetValueDetection1_2;
	    #controlNode.monitoring.pressureGaugeSetValueDetection2_1 := #statProcessValues.pressureGaugeSetValueDetection2_1;
	    #controlNode.monitoring.slideCylinderWorkPositionDetection2 := #statProcessValues.slideCylinderWorkPositionDetection2;
	    #controlNode.monitoring.hookClawCylinderHomePositionDetection2 := #statProcessValues.hookClawCylinderHomePositionDetection2;
	    #controlNode.monitoring.pressureGaugeSetValueDetection1_1 := #statProcessValues.pressureGaugeSetValueDetection1_1;
	    #controlNode.monitoring.slideCylinderMedianPositionDetection2 := #statProcessValues.slideCylinderMedianPositionDetection2;
	    
	    // ENO mechanism disabled, ENO - forced to False
	    // ENO 机制禁用，强制设置为 False
	    ENO := False;
	    
	    // Save previous value of simulation activation signal for edge detection
	    // 保存模拟激活信号的上一个值用于边沿检测
	    #statSimActivePrevious := #statSimActive;
	END_REGION OUTPUTS
END_FUNCTION_BLOCK

