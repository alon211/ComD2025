NAMESPACE Unit2.Em6
FUNCTION_BLOCK Sequence
TITLE = EquipmentC_StateActions
{ S7_Optimized_Access := 'TRUE' ; Published := 'FALSE' }
VERSION : 0.1
//State model of equipment module following the OMAC standard.
   VAR 
      statSelectedJobNumber { ExternalWritable := 'False'} : DInt;   // Evaluated Job Number
      instSequenceSCLControl { ExternalWritable := 'False'; S7_SetPoint := 'False'} : _.LAF_ControlSclSequence;
      instSequenceSCLStatus { ExternalWritable := 'False'; S7_SetPoint := 'False'} : _.LAF_StatusSclSequence;
      statVfdSportsInc { ExternalWritable := 'False'; S7_SetPoint := 'True'} : Int;
      statVfdSportsIncEnable { ExternalWritable := 'False'} : Bool;
      statLstlogisticsoutFeeding { ExternalWritable := 'False'} : Bool;
      statCurrentStepPrevious { ExternalWritable := 'False'} : DInt;
   END_VAR

   VAR CONSTANT 
      STEP_IDLE : DInt := 1;   // Idle Step
      STEP_101 : DInt := 101;   // Template Step
      STEP_102 : DInt := 102;   // Template Step
      STEP_103 : DInt := 103;
      STEP_104 : DInt := 104;
      STEP_105 : DInt := 105;
      STEP_106 : DInt := 106;
      STEP_107 : DInt := 107;
      STEP_108 : DInt := 108;
      STEP_109 : DInt := 109;
      STEP_110 : DInt := 110;
      STEP_111 : DInt := 111;
      STEP_201 : DInt := 201;
      STEP_301 : DInt := 301;
      STEP_401 : DInt := 401;
      STEP_501 : DInt := 501;
      STEP_601 : DInt := 601;
      STEP_IMMEDIATE_STOP : DInt := 901;   // Step executed when an immediate stop command is triggered for the sequence (i.e. when unit is in state aborting)
      TO_DO_INSERT_CONDITION_FOR_TRANSITION_HERE : Bool := TRUE;   // Template : Add conditions
      VFD_CW : DInt := 1;
      VFD_CCW : DInt := -1;
      TRAYPOSTION_LOGISTIC : Word := 16#0001;
      TRAYPOSTION_EM1 : Word := 16#0002;
      TRAYPOSTION_EM2 : Word := 16#0004;
      TRAYPOSTION_EM5 : Word := 16#0008;
      TRAYPOSTION_EM6 : Word := 16#0010;
   END_VAR


BEGIN
	REGION BLOCK INFO HEADER
	    //===============================================================================
	    // (company)/ (c)Copyright (year)
	    //-------------------------------------------------------------------------------
	    // Title:            (Title of this block)
	    // Comment/Function: (that is implemented in the block)
	    // Library/Family:   (that the source is dedicated to)
	    // Author:           (department / person in charge / contact)
	    // Tested with:      (test system with FW version)
	    // Engineering:      TIA Portal (SW version)
	    // Restrictions:     (OB types, etc.)
	    // Requirements:     (hardware, technological package, etc.)
	    //-------------------------------------------------------------------------------
	    // Change log table:
	    // Version  | Date       | Expert in charge        | Changes applied
	    //----------|------------|-------------------------|-----------------------------
	    // 01.00.00 | dd.mm.yyyy | (name of expert)        | First released version
	    //===============================================================================
	END_REGION BLOCK INFO HEADER
	
	REGION DESCRIPTION
	    (/*
	            This is a template block provided by the Automation Framework. It can be used to create an own project.
	            The Block Info Header is prepared to put in your own data.
	            Description of the block could be added here and the docu created by Code2Docu.
	            */)
	END_REGION DESCRIPTION
	IF HmiInterface.sequence.commands.setSingleStepMode THEN
	    IF NOT HmiInterface.sequence.commands.nextStep THEN
	        ControlNodes.sequence.status.nextStep := ControlNodes.sequence.status.currentStep;
	    END_IF;
	END_IF;
	REGION Sequence control
	    // General control of the sequence
	    #instSequenceSCLControl(idleStep := #STEP_IDLE,
	                            stoppedStep := #STEP_IMMEDIATE_STOP,
	                            resetJobs => ControlNodes.jobs.commands.reset,
	                            hmiInterface := HmiInterface.sequence,
	                            sequence := ControlNodes.sequence);
	END_REGION Sequence control
	
	REGION Steps
	    // Only execute sequence if active
	    IF ControlNodes.sequence.status.seqActive THEN
	        
	        // Determine the current step
	        CASE ControlNodes.sequence.status.currentStep OF
	                
	            #STEP_IDLE:
	                // If a new job is activated, move to the first step of that job                   
	                IF ControlNodes.sequence.status.executionEnabled THEN
	                    CASE ControlNodes.jobs.commands.setJobNumber OF
	                        _.U2EM6_JOB_EXECUTE:
	                            ControlNodes.sequence.status.nextStep := #STEP_101;
	                        _.U2EM6_JOB_STOPPING:
	                            ControlNodes.sequence.status.nextStep := #STEP_201;
	                        _.U2EM6_JOB_HOLODING:
	                            ControlNodes.sequence.status.nextStep := #STEP_301;
	                        _.U2EM6_JOB_UNHOLODING:
	                            ControlNodes.sequence.status.nextStep := #STEP_401;
	                        _.U2EM6_JOB_RESTING:
	                            ControlNodes.sequence.status.nextStep := #STEP_501;
	                        _.U2EM6_JOB_STARTING:
	                            ControlNodes.sequence.status.nextStep := #STEP_601;
	                            
	                    END_CASE;
	                    
	                END_IF;
	                REGION ########JOB_STARTING_Step600
	                    
	                END_REGION
	            #STEP_601:
	                REGION STARTING_Step601
	                    
	                    EXCHANGETRAY_RollerCmParameterUpdate();
	                    ControlNodes.cm2SingalTM.reset := true;
	                    
	                    ControlNodes.sequence.status.nextStep := #STEP_IDLE;
	                    
	                END_REGION ;
	                REGION ########JOB_RESTING_Step500
	                    
	                END_REGION
	            #STEP_501:
	                REGION RESTING_Step501
	                    ControlNodes.cm2SingalTM.reset := true;
	                    ControlNodes.sequence.status.nextStep := #STEP_IDLE;
	                    
	                END_REGION ;
	                REGION ########JOB_UNHOLODING_Step400
	                    
	                END_REGION
	            #STEP_401:
	                REGION UNHOLODING_Step401
	                    
	                    ControlNodes.sequence.status.nextStep := #STEP_IDLE;
	                END_REGION ;
	                REGION ########JOB_HOLODING_Step300
	                    
	                END_REGION
	            #STEP_301:
	                REGION HOLODING_Step301
	                    
	                    IF NOT ControlNodes.cm1Vfd207.monitoring.vfdStopped THEN
	                        ControlNodes.cm1Vfd207.commands.sinaCommands.stop := TRUE;
	                    END_IF;
	                    IF ControlNodes.cm1Vfd207.monitoring.vfdStopped THEN
	                        ControlNodes.sequence.status.nextStep := #STEP_IDLE;
	                    END_IF;
	                END_REGION ;
	                REGION ########JOB_STOPPING_Step200
	                    
	                END_REGION
	            #STEP_201:
	                REGION stopping_Step201
	                    IF NOT ControlNodes.cm1Vfd207.monitoring.vfdStopped THEN
	                        ControlNodes.cm1Vfd207.commands.sinaCommands.stop := TRUE;
	                    END_IF;
	                    IF ControlNodes.cm1Vfd207.monitoring.vfdStopped THEN
	                        ControlNodes.sequence.status.nextStep := #STEP_IDLE;
	                    END_IF;
	                END_REGION ;
	                REGION ########JOB_EXECUTE_Step100
	                    
	                END_REGION
	                
	            #STEP_101:
	                REGION initPara
	                    EXCHANGETRAY_RollerCmParameterUpdate();
	                    _.Unit2.EmNodes.emRelations.EM6.deliver.logistics.feedback.inFeedEnabled := FALSE;
	                    ControlNodes.cm1Vfd207.commandConfiguration.direction := #VFD_CW;
	                    EXCHANGETRAY_VfdExecuteControl(FALSE);
	                    
	                END_REGION ;
	                
	                IF ControlNodes.cm1Vfd207.monitoring.vfdStopped THEN
	                    ControlNodes.sequence.status.nextStep := #STEP_102;
	                END_IF;
	                
	            #STEP_102:
	                REGION Logistics or constraint request step 102
	                    // 物流或拘束工位请求信息 - Logistics or constraint workstation request information
	                    IF _.Unit2.EmNodes.emRelations.EM6.recieve.logistics.req.outFeedReq
	                        AND
	                        _.Global.Data.material.Unit2.plastic.monitor.postion.logistic
	                    THEN
	                        _.Unit2.EmNodes.emRelations.EM6.deliver.logistics.feedback.inFeedEnabled := TRUE;
	                    END_IF;
	                    
	                END_REGION
	                IF _.Unit2.EmNodes.emRelations.EM6.deliver.logistics.feedback.inFeedEnabled THEN
	                    ControlNodes.sequence.status.nextStep := #STEP_103;
	                END_IF;
	                
	                REGION #####logisticToEm6
	                    // Statement section REGION
	                    
	                END_REGION
	                
	            #STEP_103:
	                REGION Logistics feeding step 103
	                    // 物流进料中 - Logistics feeding in progress
	                    ControlNodes.cm1Vfd207.commandConfiguration.direction := #VFD_CW;
	                    
	                    EXCHANGETRAY_VfdExecuteControl(true);
	                    _.Unit2.EmNodes.emRelations.EM6.deliver.logistics.feedback.outFeeding := TRUE;
	                END_REGION
	                IF ControlNodes.cm2SingalTM.monitoring.trayAutomaticFeedingDetectionU2Em6 THEN
	                    
	                    ControlNodes.sequence.status.nextStep := #STEP_104;
	                END_IF;
	                
	            #STEP_104:
	                REGION Constraint tray position em6 step 104
	                    // 拘束托盘到位EM6 - Constraint tray in position at EM6
	                    IF ControlNodes.cm1Vfd207.monitoring.vfdStopped
	                        AND
	                        _.Unit2.EmNodes.emRelations.EM6.recieve.workStationRoller.req.inFeedReq
	                    THEN
	                        ControlNodes.sequence.status.nextStep := #STEP_105;
	                    END_IF;
	                    
	                    EXCHANGETRAY_VfdExecuteControl(false);
	                    //更新托盘位置 - Update tray position
	                    _.Global.Data.material.Unit2.plastic.monitor.postion.position := #TRAYPOSTION_EM6;
	                    _.Unit2.EmNodes.emRelations.EM6.deliver.logistics.feedback.outFeeding := FALSE;
	                    
	                    _.Unit2.PublishedDB.rollerB2ToLogistic.recieve.logistics.req.outFeedReq := FALSE;
	                    //请求出料 - Request output
	                    "_".Unit2.EmNodes.emRelations.EM6.deliver.workStationRoller.req.outFeedReq := TRUE;
	                    
	                END_REGION
	            #STEP_105:
	                REGION Constraint tray transfer em5 step 105
	                    // 拘束托盘转移EM5进行中 - Constraint tray transfer to EM5 in progress
	                    EXCHANGETRAY_VfdExecuteControl(true);
	                    
	                    IF _.Global.Data.material.Unit2.plastic.monitor.postion.EM5 THEN
	                        EXCHANGETRAY_VfdExecuteControl(FALSE);
	                        ControlNodes.sequence.status.nextStep := #STEP_106;
	                    END_IF;
	                END_REGION
	                REGION Tray transfer from em5 to em6
	                    // 托盘从EM5转移到EM6 - Tray transfer from EM5 to EM6
	                END_REGION
	                
	            #STEP_106:
	                
	                REGION Waiting tray from em5 step 106
	                    // 等待托盘从EM5 - Waiting for tray from EM5
	                    IF ControlNodes.cm1Vfd207.monitoring.vfdStopped
	                        AND
	                        _.Unit2.EmNodes.emRelations.EM6.recieve.workStationRoller.req.outFeedReq
	                    THEN
	                        _.Unit2.EmNodes.emRelations.EM6.deliver.workStationRoller.req.inFeedReq := TRUE;
	                        ControlNodes.sequence.status.nextStep := #STEP_107;
	                    END_IF;
	                    
	                END_REGION
	            #STEP_107:
	                ControlNodes.cm1Vfd207.commandConfiguration.direction := #VFD_CCW;
	                EXCHANGETRAY_VfdExecuteControl(TRUE);
	                
	                REGION Plastic tray return em6 step 107
	                    // 塑料托盘返回EM6进行中 - Plastic tray returning to EM6 in progress
	                    IF ControlNodes.cm2SingalTM.monitoring.trayAutomaticFeedingDetectionU2Em6 THEN
	                        ControlNodes.sequence.status.nextStep := #STEP_108;
	                    END_IF;
	                    
	                END_REGION
	            #STEP_108:
	                REGION Full tray to em6 step 108
	                    // 满托盘到EM6 - Full tray arrived at EM6
	                    IF ControlNodes.cm1Vfd207.monitoring.vfdStopped
	                        AND
	                        _.Unit2.EmNodes.emRelations.EM6.recieve.logistics.req.inFeedReq
	                    THEN
	                        ControlNodes.sequence.status.nextStep := #STEP_109;
	                    END_IF;
	                    EXCHANGETRAY_VfdExecuteControl(FALSE);
	                    _.Unit2.EmNodes.emRelations.EM6.deliver.workStationRoller.req.inFeedReq :=
	                    _.Unit2.EmNodes.emRelations.EM5.deliver.roller.req.outFeedReq := FALSE;
	                    
	                    //更新托盘信息 - Update tray information
	                    _.Global.Data.material.Unit2.plastic.monitor.postion.position := #TRAYPOSTION_EM6;
	                    
	                    _.Global.Data.material.Unit2.plastic.monitor.status.cellsStatus := 1;
	                    //请求出料 - Request output
	                    _.Unit2.EmNodes.emRelations.EM6.deliver.logistics.req.outFeedReq := TRUE;
	                    
	                END_REGION
	                
	            #STEP_109:
	                EXCHANGETRAY_VfdExecuteControl(true);
	                
	                REGION Empty tray to logistics step 109
	                    // 空托盘进入物流进行中 - Empty tray entering logistics in progress
	                    IF _.Global.Data.material.Unit2.plastic.monitor.postion.logistic THEN
	                        EXCHANGETRAY_VfdExecuteControl(FALSE);
	                        IF ControlNodes.cm1Vfd207.monitoring.vfdStopped THEN
	                            ControlNodes.sequence.status.nextStep := #STEP_IDLE;
	                        END_IF;
	                        
	                    END_IF;
	                    
	                END_REGION
	                REGION IMMEDIATE_STOP
	                    // 紧急停止 - Immediate stop
	                    
	                END_REGION
	                
	            #STEP_IMMEDIATE_STOP:
	                IF NOT ControlNodes.cm1Vfd207.monitoring.vfdStopped THEN
	                    ControlNodes.cm1Vfd207.commands.sinaCommands.fastStop := TRUE;
	                END_IF;
	                IF ControlNodes.cm1Vfd207.monitoring.vfdStopped THEN
	                    ControlNodes.sequence.status.nextStep := #STEP_IDLE;
	                END_IF;
	        END_CASE;
	    END_IF;
	END_REGION Steps
	
	REGION Status updates      
	    REGION Sequence Status
	        // Update the status
	        #instSequenceSCLStatus(parentReferenceDesignator := Config.em.referenceDesignator.combined,
	                               idleStep := #STEP_IDLE,
	                               stoppedStep := #STEP_IMMEDIATE_STOP,
	                               setJobNumber := ControlNodes.jobs.commands.setJobNumber,
	                               activeJobNumber => ControlNodes.jobs.status.activeJobNumber,
	                               previousCycleJobNumber => ControlNodes.jobs.status.previousCycleJobNumber,
	                               hmiInterface := HmiInterface.sequence,
	                               sequence := ControlNodes.sequence);
	    END_REGION Sequence Status
	    
	    REGION Update Job History
	        // Update the History of jobs if a new job was started
	        IF (ControlNodes.jobs.status.activeJobNumber <> ControlNodes.jobs.status.previousCycleJobNumber) THEN
	            _.LAF_UpdateJobHistory(jobs := ControlNodes.jobs);
	        END_IF;
	    END_REGION
	    
	    REGION Output steps as String
	        // Write outputs as strings 
	        ControlNodes.sequence.status.currentStepSTRING := StepToString(ControlNodes.sequence.status.currentStep);
	        ControlNodes.sequence.status.previousStepSTRING := StepToString(ControlNodes.sequence.status.previousStep);
	        ControlNodes.sequence.status.nextStepSTRING := StepToString(ControlNodes.sequence.status.nextStep);
	    END_REGION Output steps as String   
	    
	    #statLstlogisticsoutFeeding := _.Unit2.EmNodes.emRelations.EM6.recieve.logistics.feedback.outFeeding;
	END_REGION Status updates
END_FUNCTION_BLOCK
END_NAMESPACE

